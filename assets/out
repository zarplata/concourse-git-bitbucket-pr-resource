#!/usr/bin/env bash
# vim: set ft=sh

set -euo pipefail

exec 3>&1
exec 1>&2

cd "${1}"

payload=$(mktemp /tmp/resource.XXXXXX)
cat > "${payload}" <&0

# source
bitbucket_type=$(jq -r '.source.bitbucket_type // "server"' < "${payload}")
base_url=$(jq -r '.source.base_url // ""' < "${payload}")
username=$(jq -r '.source.username // ""' < "${payload}")
password=$(jq -r '.source.password // ""' < "${payload}")
access_token=$(jq -r '.source.access_token // ""' < ${payload})
project=$(jq -r '.source.project // ""' < "${payload}")
repository=$(jq -r '.source.repository // ""' < "${payload}")
path=$(jq -r '.params.repository // .source.dir // .source.repository // ""' < "${payload}")
params=$(jq -rc '.params' < "${payload}")
action=$(jq -rc '.action // ""' <<< "${params}")
oauth_id=$(jq -r '.source.oauth_id // ""' < ${payload})
oauth_secret=$(jq -r '.source.oauth_secret // ""' < ${payload})
skip_ssl_verification=$(jq -r '.source.skip_ssl_verification // "false"' < ${payload})
ssl_cacert=$(jq -r '.source.ssl_cacert // ""' < ${payload})

path="$(realpath "${PWD}"/"${path}")/"
pr=$(cat "${path}.git/pr")

if [[ "$bitbucket_type" == "cloud" ]]; then
      base_url="https://api.bitbucket.org"
fi

eval_param() {
    eval echo "$(jq -r "${1}" <<< "${params}")"
}

change_build_status() {
    if [[ -z "${base_url}" ]]; then
        echo "error: source.base_url can't be empty"
        exit 1
    fi

    commit=$(jq -r '.commit' <<< "${pr}")

    if [[ "${bitbucket_type}" == "server" ]]; then
        url="${base_url}/rest/build-status/1.0/commits/${commit}"
    elif [[ "${bitbucket_type}" == "cloud" ]]; then
        url="${base_url}/2.0/repositories/${project}/${repository}/commit/${commit}/statuses/build"
    else
        echo "error: incorrect bitbucket server type '${bitbucket_type}'"
        exit 1
    fi

    change_build_status_payload=$(jq -n \
        --arg key "$(eval_param '.key // env.BUILD_JOB_NAME')" \
        --arg name "$(eval_param '.name // "\(env.BUILD_JOB_NAME)-\(env.BUILD_ID)"')" \
        --arg description "$(eval_param '.description // ""')" \
        --arg state "$(eval_param '.state // ""')" \
        --arg url "$(eval_param '.url // ""')" \
        '{
            state: $state,
            key: $key,
            name: $name,
            url: (
                if $url != "" then
                    $url
                else
                    "\(env.ATC_EXTERNAL_URL)/builds/\(env.BUILD_ID)"
                end
            ),
            description: $description|tostring
        }'
    )

    # Check for SSL verification skipping
    if [[ "$skip_ssl_verification" == "true" ]]; then
        ssl_flag="--insecure"
    else
        ssl_flag=""
    fi

    # Check for SSL CA Cert
    if [[ -n "${ssl_cacert}" ]]; then
        ssl_flag="--cacert ${ssl_cacert}"
    fi

    if [[ -n "${access_token}" ]]; then
        authentication=(-H "Authorization: Bearer ${access_token}")
    else
        authentication=(-u ${username}:${password})
    fi
    if [[ -n "${oauth_id}" ]]; then
        oauth_response=$(mktemp /tmp/resource.XXXXXX)
        uri="${base_url}/site/oauth2/access_token"
        if [[ "$bitbucket_type" == "cloud" ]]; then
             uri="https://bitbucket.org/site/oauth2/access_token"
        fi
        curl -XPOST -sSL ${ssl_flag} --fail -u "${oauth_id}:${oauth_secret}" -d grant_type=client_credentials $uri | jq -r '.access_token' > "${oauth_response}"
        authentication=(-H "Authorization: Bearer `cat $oauth_response`")
    fi

    curl -sL --fail \
        ${ssl_flag} \
        "${authentication[@]}" \
        -H "Content-Type: application/json" \
        -XPOST "${url}" \
        -d "${change_build_status_payload}"

    jq -n --argjson pr "${pr}" --argjson payload "${change_build_status_payload}" '{
        version: {
            id: $pr.id|tostring,
            title: $pr.title,
            branch: $pr.feature_branch,
            commit: $pr.commit
        },
        metadata: [
            {name: "state", value: $payload.state},
            {name: "key", value: $payload.key},
            {name: "name", value: $payload.name},
            {name: "description", value: $payload.description}
        ]
    }' >&3
}

push() {
    git=$(jq -r '.source.git // ""' < "${payload}")

    git_payload=$(jq -nc \
        --argjson git "${git}" \
        --argjson pr "${pr}" \
        --arg repository "${path}" '
        {
            source: (
                $git * {
                    branch: $pr.feature_branch
                }
            ),
            params: {
                repository: $repository
            }
        }
    ')

    git_payload_out=$(/opt/git-resource/out "${1}" <<< "${git_payload}")

    jq -n --argjson pr "${pr}" --argjson git "${git_payload_out}" \
        '{
            version: {
                id: $pr.id|tostring,
                title: $pr.title,
                branch: $pr.feature_branch,
                commit: $git.version.ref
            },
            metadata: $git.metadata
        }' >&3
}

case "${action}" in
    # case for backward compatibility
    "")
        echo "warning: please setup the \`action\` parameter"
        change_build_status
    ;;

    "change-build-status")
        change_build_status
    ;;

    "push")
        push "${@%/}"
    ;;

    *)
        echo "error: incorrect params.action (${action})"
        exit 1
    ;;
esac
